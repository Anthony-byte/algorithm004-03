#+TITLE: Week 2 Notes

* Methodologies

** Four Steps Problem Solving Process

*** Clarification

*** List all solutions

*** Code

*** Test

** Consolidate Good Solutions
   - Consolidate all the good solutions for each problem
   - Review before interviews

* Hash Table, Map and Set

** Hash Table

*** Gist
    - Hash tables store key: value pairs
    - Look up the element with time complexity of O(1)
    - Map the key value into a position (index) in the table to speed up the lookup process
      + this mapping function is called a hashing fuction
      + this table storing records is called a hash table

*** Real world implementation
    - Yello pages
    - User lists
    - LRU Cache
    - Redis

*** Hash Function
    - val => Hash Function => index
    - Hash Colision: some values will generate the same index value after mapped by the hash function
    - Solution in Java: use a Linked List, adding another dimension. The downside of this solution is as the linked list grows, it will increase the time complexity, approaching O(n)

*** Big O

**** Time
     - average: O(1) for lookup, insertion, deletion
     - worst: O(n) => Hash Table is degraded to a Linked List

**** Space
     - O(n)

*** Python Docs

**** Dictionary

**** Set

** LeetCoding

*** LeetCode 242 Valid Anagram

**** Though Process
     - To determin if two strings s, t are anagram, they need to be:
       + have the same unique letters
       + the counts of each unique letters are the same
       + use dictionary with key is the letter, value is the count

**** Code 1

 #+BEGIN_SRC python :session :exports both :results output org
class Solution:
    def isAnagram(self, s:str, t: str) -> bool:
        s_d, t_d = {}, {}

        s_d = self._strTodict(s)
        t_d = self._strTodict(t)
        return s_d == t_d
    
    # def _compareDict(self, s_d:dict, t_d:dict) -> bool:
    #     for k in s_d.keys():
    #         if k not in t_d:
    #             return False
    #         else:
    #             if s_d[k] != t_d[k]:
    #                 return False
    #     return True

    def _strTodict(self, s:str) -> dict:
        s_d = {}
        for l in s:
            if l in s_d:
                s_d[l] += 1
            else:
                s_d[l] = 1
        return s_d

def test():
    s = "anagram"
    t = "nagaram"

    sol = Solution()
    print(sol.isAnagram(s, t))

def test2():
    s = "rat"
    t = "car"
    sol = Solution()
    print(sol.isAnagram(s, t))

if __name__ == "__main__":
    test()
    test2()
 #+END_SRC

 #+RESULTS:
 #+begin_src org
True
False
 #+end_src

*** LeetCode 2 Two Sum

* Tree, Graph, Binary Tree, BST

** 2-D Data Structure
   - The biggest issue with linear data structure is its lookup performance. Time complexity is usually O(n)
   - The key to improve the speed is to create an additional dimension
   - The most common 2-D data structures are Tree and Graph

** Tree

*** Gist
    - When a Linked List has multiple next pointers => it becomes a Tree
    - Representation
      [[./assets/binary_tree.jpg]]
    - Key elements
      + Root
      + Sub-tree
      + Parent
      + Child: left, right (for Binary Tree)
      + Leaf: node without child
      + Siblings

*** Binary Tree

    - The most common trees are Binary Trees
    - A binary tree only has 2 children: left and right

*** Code

**** Python
#+begin_src python
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
#+end_src

*** Traversal
    - One of the most important Tree operations is traversal

** Graph

*** Gist
    - The biggest difference between a Tree and a Graph is the Tree doesn't circle backwards
      + A Linked List is a special type of Tree
      + Tree is a Graph without loops
